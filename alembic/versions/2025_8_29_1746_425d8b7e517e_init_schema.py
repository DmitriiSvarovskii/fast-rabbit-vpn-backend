"""init schema

Revision ID: 425d8b7e517e
Revises: 
Create Date: 2025-08-29 17:46:19.745222

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '425d8b7e517e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BIGINT(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_telegram_id'), 'users', ['telegram_id'], unique=True)
    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('payload', sa.String(), nullable=False),
    sa.Column('stars_amount', sa.Integer(), nullable=False),
    sa.Column('rub_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=8), server_default=sa.text("'XTR'"), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PAID', 'CANCELED', 'EXPIRED', 'REFUNDED', 'FAILED', name='payment_status_enum', native_enum=False), nullable=False, comment='Статус платежа'),
    sa.Column('telegram_charge_id', sa.String(), nullable=True, comment='Telegram SuccessfulPayment.charge_id'),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.Column('canceled_at', sa.DateTime(), nullable=True),
    sa.Column('failed_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('payload', name='uq_payments_payload')
    )
    op.create_index('ix_payments_created', 'payments', ['created_at'], unique=False)
    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)
    op.create_index(op.f('ix_payments_user_id'), 'payments', ['user_id'], unique=False)
    op.create_index('ix_payments_user_status', 'payments', ['user_id', 'status'], unique=False)
    op.create_index('uq_payments_charge_id_not_null', 'payments', ['telegram_charge_id'], unique=True, postgresql_where=True)
    op.create_table('vpn_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.String(length=64), nullable=True, comment='UUID пользователя в провайдере VPN'),
    sa.Column('vpn_domain', sa.String(length=64), nullable=True),
    sa.Column('flow', sa.String(length=64), nullable=True),
    sa.Column('email', sa.String(length=64), nullable=True),
    sa.Column('country', sa.String(length=64), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'uuid', name='uq_vpn_config_user_external')
    )
    op.create_index('ix_vpn_configs_created', 'vpn_configs', ['created_at'], unique=False)
    op.create_index(op.f('ix_vpn_configs_id'), 'vpn_configs', ['id'], unique=False)
    op.create_index(op.f('ix_vpn_configs_user_id'), 'vpn_configs', ['user_id'], unique=False)
    op.create_table('refunds',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('telegram_charge_id', sa.String(length=128), nullable=True),
    sa.Column('stars_amount', sa.Integer(), nullable=False),
    sa.Column('rub_amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('status', sa.Enum('REQUESTED', 'OK', 'FAILED', name='refund_status_enum', native_enum=False), nullable=False, comment='Статус операции возврата'),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_refunds_charge', 'refunds', ['telegram_charge_id'], unique=False)
    op.create_index(op.f('ix_refunds_id'), 'refunds', ['id'], unique=False)
    op.create_index('ix_refunds_payment', 'refunds', ['payment_id'], unique=False)
    op.create_index(op.f('ix_refunds_payment_id'), 'refunds', ['payment_id'], unique=False)
    op.create_index(op.f('ix_refunds_user_id'), 'refunds', ['user_id'], unique=False)
    op.create_table('wallet_ledger',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('entry_type', sa.Enum('TOPUP', 'DEBIT', 'REFUND', 'ADJUSTMENT', 'BONUS', name='ledger_type_enum', native_enum=False), nullable=False, comment='Тип операции'),
    sa.Column('amount_rub', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_wallet_ledger_id'), 'wallet_ledger', ['id'], unique=False)
    op.create_index(op.f('ix_wallet_ledger_payment_id'), 'wallet_ledger', ['payment_id'], unique=False)
    op.create_index('ix_wallet_ledger_user_created', 'wallet_ledger', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_wallet_ledger_user_id'), 'wallet_ledger', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_wallet_ledger_user_id'), table_name='wallet_ledger')
    op.drop_index('ix_wallet_ledger_user_created', table_name='wallet_ledger')
    op.drop_index(op.f('ix_wallet_ledger_payment_id'), table_name='wallet_ledger')
    op.drop_index(op.f('ix_wallet_ledger_id'), table_name='wallet_ledger')
    op.drop_table('wallet_ledger')
    op.drop_index(op.f('ix_refunds_user_id'), table_name='refunds')
    op.drop_index(op.f('ix_refunds_payment_id'), table_name='refunds')
    op.drop_index('ix_refunds_payment', table_name='refunds')
    op.drop_index(op.f('ix_refunds_id'), table_name='refunds')
    op.drop_index('ix_refunds_charge', table_name='refunds')
    op.drop_table('refunds')
    op.drop_index(op.f('ix_vpn_configs_user_id'), table_name='vpn_configs')
    op.drop_index(op.f('ix_vpn_configs_id'), table_name='vpn_configs')
    op.drop_index('ix_vpn_configs_created', table_name='vpn_configs')
    op.drop_table('vpn_configs')
    op.drop_index('uq_payments_charge_id_not_null', table_name='payments', postgresql_where=True)
    op.drop_index('ix_payments_user_status', table_name='payments')
    op.drop_index(op.f('ix_payments_user_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_id'), table_name='payments')
    op.drop_index('ix_payments_created', table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_users_telegram_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
